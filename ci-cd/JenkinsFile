pipeline {
    agent any
    environment {
        PATH = "${env.PATH};C:\\Windows\\System32"
        DOCKER_IMAGE = "fahadx/myapp:1"
        DOCKER_CREDENTIALS = credentials('docker_hub')
        KUBE_CONFIG = credentials('kube')
        SCANNER_HOME = tool 'sonar-scan' //sonar tool
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    if (fileExists('Crud_App--CICD')) {
                        bat 'rmdir /s /q Crud_App--CICD' 
                    }
                    bat 'git clone --branch test https://github.com/Fahad77-create/Crud_App--CICD.git'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv('sonar-scan') {
                  bat 'sonar-scanner -Dsonar.projectKey=crud-app -Dsonar.sources=./Crud_App--CICD'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    bat 'docker-compose -f Crud_App--CICD/Docker-compose.yaml build --progress=plain'
                }
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                script {
                    bat "powershell -ExecutionPolicy Bypass -File ./Crud_App--CICD/trivy-scan.ps1 $DOCKER_IMAGE:client"

                    bat "powershell -ExecutionPolicy Bypass -File ./Crud_App--CICD/trivy-scan.ps1 $DOCKER_IMAGE:server"
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker_hub') {
                        bat 'docker-compose -f Crud_App--CICD/docker-compose.yml push'
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kube-config', variable: 'KUBE_CONFIG')]) {
                        bat 'kubectl apply -f Crud_App--CICD/client/k8s/client-deployment.yaml'
                        bat 'kubectl apply -f Crud_App--CICD/client/k8s/client-service.yaml'

                        bat 'kubectl apply -f Crud_App--CICD/server/k8s/server-deployment.yaml'
                        bat 'kubectl apply -f Crud_App--CICD/server/k8s/server-service.yaml'

                        bat 'kubectl apply -f Crud_App--CICD/server/DB/k8s/db-statefulset.yaml'
                        bat 'kubectl apply -f Crud_App--CICD/server/DB/k8s/db-service.yaml'
                    }
                }
            }
        }
    }
}
